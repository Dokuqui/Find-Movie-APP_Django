name: Run Django App

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

  lint:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install linter
        run: pip install flake8

      - name: Lint code
        run: flake8 . --max-line-length=130

  test:
    if: "!contains(github.event.head_commit.message, '[doc]')"
    name: Run Tests
    runs-on: ubuntu-latest
    needs: [ build, lint ]
    env:
      OMDB_API_KEY: ${{ secrets.OMDB_API_KEY }}
      ALLOWED_HOSTS: ${{ secrets.ALLOWED_HOSTS }}
      DJANGO_SECRET: ${{ secrets.DJANGO_SECRET }}
    steps:
      - uses: actions/checkout@v4

      - name: Reuse Python setup
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/dev.txt

      - name: Set up test database
        run: |
          python manage.py makemigrations
          python manage.py migrate         

      - name: Run tests with coverage
        run: |
          coverage run --source='.' manage.py test
        continue-on-error: true

      - name: Generate coverage report
        run: |
          coverage report -m
          coverage xml -o coverage.xml
        continue-on-error: true

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4.0.1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml

  deploy:
    if: "!contains(github.event.head_commit.message, '[doc]')"
    name: Deploy on Azure VM
    runs-on: ubuntu-latest
    needs: [lint, test]

    env:
      CI_PROJECT_NAME: ${{ github.repository }}
      SSH_PORT: ${{ secrets.SSH_PORT }}
      SSH_HOST: ${{ secrets.SSH_HOST }}
      SSH_USER: ${{ secrets.SSH_USER }}
      DJANGO_SECRET: ${{ secrets.DJANGO_SECRET }}
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      CSRF_COOKIE_DOMAIN: ${{ secrets.CSRF_COOKIE_DOMAIN }}
      CSRF_TRUSTED_ORIGIN: ${{ secrets.CSRF_TRUSTED_ORIGIN }}
      IS_DEBUG: ${{ secrets.IS_DEBUG }}
      ALLOWED_HOSTS: ${{ secrets.ALLOWED_HOSTS }}
      CORS_ALLOWED_ORIGIN: ${{ secrets.CORS_ALLOWED_ORIGIN }}
      OMDB_API_KEY: ${{ secrets.OMDB_API_KEY }}

    steps:
      - uses: actions/checkout@v4

      - name: Reuse Python setup
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/prod.txt

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GitHub Packages
        run: echo "${{ secrets.GH_PACKAGES_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build Docker Image
        run: |
          docker build -t ghcr.io/dokuqui/find-movie-app_django/find-movie:latest .

      - name: Push Docker Image
        run: |
          docker push ghcr.io/dokuqui/find-movie-app_django/find-movie:latest

      - name: Setup SSH keys
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H "$SSH_HOST" >> ~/.ssh/known_hosts

      - name: Run Docker Compose
        run: |
          echo "DJANGO_SECRET_KEY=$DJANGO_SECRET" >> $GITHUB_ENV
          echo "IS_DEBUG=$IS_DEBUG" >> $GITHUB_ENV
          echo "ALLOWED_HOSTS=$ALLOWED_HOSTS" >> $GITHUB_ENV
          echo "DATABASE_URL=$DATABASE_URL" >> $GITHUB_ENV
          echo "CORS_ALLOWED_ORIGIN=$CORS_ALLOWED_ORIGIN" >> $GITHUB_ENV
          echo "CSRF_COOKIE_DOMAIN=$CSRF_COOKIE_DOMAIN" >> $GITHUB_ENV
          echo "CSRF_TRUSTED_ORIGIN=$CSRF_TRUSTED_ORIGIN" >> $GITHUB_ENV
          echo "OMDB_API_KEY=OMDB_API_KEY" >> $GITHUB_ENV
          envsubst < docker-compose.tmpl > docker-compose.yml
          docker compose up -d --build

      - name: Verify deployment
        run: |
          docker ps

      - name: Copy Docker Compose to Azure VM
        run: |
            ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa "$SSH_USER@$SSH_HOST" "mkdir -p /home/$SSH_USER/$CI_PROJECT_NAME"
            scp -P "$SSH_PORT" docker-compose.yml "$SSH_USER@$SSH_HOST:/home/$SSH_USER/$CI_PROJECT_NAME"

      - name: SSH into Azure VM and deploy
        run: |
            ssh -o StrictHostKeyChecking=no -T -i ~/.ssh/id_rsa "$SSH_USER@$SSH_HOST" << EOF
            set -e
            cd /home/$SSH_USER/$CI_PROJECT_NAME
          
            echo "${{ secrets.GH_PACKAGES_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
                
            sudo docker compose pull
          
            sudo docker compose up -d --build
            EOF

      - name: Verify deployment
        run: |
            ssh -o StrictHostKeyChecking=no -T -i ~/.ssh/id_rsa "$SSH_USER@$SSH_HOST" "docker ps"